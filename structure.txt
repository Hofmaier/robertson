               Type class laws and Equational Reasoning
               ========================================

Author: Lukas Hofmaier
Date: 2015-03-20 11:42:12 CET


Category laws und Functor laws spezifizieren Properties. 
Properties koennen mit Equational Reasoning verifiziert werden.
Ich moechte in diesem Report zeigen, weshalb die Laws von Type classes nuetzlich sind und wie man sie mit Equational Reasoning verifizieren kann.

Table of Contents
=================
1 Type classes have laws (Category theory laws)
    1.1 Category design pattern (composable programming)
        1.1.1 Monoid laws
        1.1.2 Example
    1.2 Functor design pattern (functor laws)
        1.2.1 Functor laws
2 Equational Reasoning
    2.1 Proof by induction
        2.1.1 Optimisation by induction
    2.2 Reasoning about algebraic types
    2.3 Composition of proofs
    2.4 Proof automation
3 Real world example: pipes
    3.1 Streaming data problem (Problem with Lazy IO)
    3.2 Optimierung mit Rewrite rules
        3.2.1 Haskell rewrite rules system
        3.2.2 short-cut fusion
4 Fragen


1 Type classes have laws (Category theory laws) 
================================================
Weshalb haben Type classes laws? 
Type classes sind Categories.
- Haskell function -> Function category
- Monad -> Keisli category

Folgende Type classes und ihre laws sind releveant.
- Functor
- Applicative
- Monad
- Monoid

Weshalb sind categories nuetzlich und weshalb ist es wichtig, dass sie die laws erfuellen?

1.1 Category design pattern (composable programming) 
-----------------------------------------------------
Ein Category im Sinne der Category Theory ist ein compositional design pattern.
(Was ist der Untschied zwischen Pipes & Filter und compositional?).
Category theory schreibt laws vor (category laws):
- Associativity law
- Left identity law
- Right identity law

Comparison: conventional architecture vs. combinability (functional architecture)
Konventionelle Architekture schlaegt vor, dass man mehrer Componenten von Typ A zu einem Typ B zusammenfasst. 
Es entstehen Layers.
Category pattern schlaegt vor dass man mehrere Komponenten von Typ A zu A zusammenfasst. 
Der neue Typ unterscheidet sich nicht von Mehreren (Composability)

1.1.1 Monoid laws 
~~~~~~~~~~~~~~~~~~

1.1.2 Example 
~~~~~~~~~~~~~~
Pipes sind auch composable.

1.2 Functor design pattern (functor laws) 
------------------------------------------
Transformiert eine Category in eine andere.

1.2.1 Functor laws 
~~~~~~~~~~~~~~~~~~~
- composition law
- identity law

2 Equational Reasoning 
=======================
Mit der Methode equational reasoning werden properties verifziert. 

2.1 Proof by induction 
-----------------------
Um ein property zu verifizieren wird in vielen Beispielen proof by induction angewendet.

2.1.1 Optimisation by induction 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Definitionen koennen mit Hilfe von Induction optimiert werden.

2.2 Reasoning about algebraic types 
------------------------------------

2.3 Composition of proofs 
--------------------------
Kleine components werden mit proofs verifiziert. 
Diese koennen wiederverwendet werden um groessere Components zu beweisen.
Wie werden die Proofs zusammengesetzt.
Was ist ein Morphism?

2.4 Proof automation 
---------------------
Gibt es tools die equational reasoning automatisieren koennen?
- Agda

3 Real world example: pipes 
============================
Pipes ist ein stream library fuer Haskell. 
Sie wurde urspruenglich geschrieben, weil die "lazy IO" library problematisch ist (streaming data problem).
pipes nutzt equational reasoning um correctness zu verifizieren.
In pipes wird das category design pattern angewendet.

3.1 Streaming data problem (Problem with Lazy IO) 
--------------------------------------------------
Weshalb wurde pipes ueberhaupt geschrieben? Weshalt ist lazy I/O problematisch.

3.2 Optimierung mit Rewrite rules 
----------------------------------
Rewrite rules werden dazu genutzt um Haskell code zu optimieren ohne Rueckwaertskompatibilaet zu anzutasten.
Man kann rewrite rules verifizieren mit equational reasoning.
pipes wird mit rewrite rules optimiert.

3.2.1 Haskell rewrite rules system 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.2.2 short-cut fusion 
~~~~~~~~~~~~~~~~~~~~~~~
Ist eine optimierungs 

4 Fragen 
=========
- Weshalb eignet sich Haskell fuer equational reasoning?
